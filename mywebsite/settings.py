"""
Django settings for mywebsite project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from django.urls import reverse_lazy
import os
from dotenv import load_dotenv
import logging

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

# Load environment variables from .env file
load_dotenv(Path(__file__).resolve().parent / '.env')

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
#DEBUG = os.environ.get('DEBUG', 'True') == 'True'

ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', '').split(',') if os.environ.get('ALLOWED_HOSTS') else []
CSRF_TRUSTED_ORIGINS = ['https://bomby-799218251279.us-central1.run.app']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'MAIN',
    'ACCOUNTS',
    'PORTFOLIO',
    'STORE',
    'storages',
]

# Add site ID
SITE_ID = 1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'STORE.middleware.AnalyticsMiddleware',
]

ROOT_URLCONF = 'mywebsite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'MAIN.context_processors.announcement_processor',
            ],
        },
    },
]

WSGI_APPLICATION = 'mywebsite.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'postgres',
        'USER': 'postgres',
        'PASSWORD': os.environ.get('DB_PASSWORD', ''),
        'HOST': os.environ.get('DB_HOST', '/cloudsql/premium-botany-453018-a0:us-central1:bomby-database'),
        'PORT': '5432',
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Whitenoise
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

WHITENOISE_MIMETYPES = {
    '.css': 'text/css',
    '.js': 'application/javascript',
    '.html': 'text/html',
    '.jpg': 'image/jpeg',
    '.png': 'image/png',
    '.svg': 'image/svg+xml',
}

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

## EMAIL SETTINGS
EMAIL_BACKEND = 'sendgrid_backend.SendgridBackend'
SENDGRID_API_KEY = os.environ.get('SENDGRID_API_KEY')
DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', 'sebetvbusiness@gmail.com')
SENDGRID_SANDBOX_MODE = False
SENDGRID_SANDBOX_MODE_IN_DEBUG = False

## LOGIN SETTINGS
AUTH_USER_MODEL = 'ACCOUNTS.User'
LOGIN_URL = 'ACCOUNTS:login'
LOGIN_REDIRECT_URL = reverse_lazy('ACCOUNTS:account')
LOGOUT_REDIRECT_URL = 'MAIN:home'

## AWS SETTINGS
AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')
AWS_REGION = os.environ.get('AWS_REGION', 'us-east-1')

# AWS Rekognition
ENABLE_IMAGE_MODERATION = os.environ.get('ENABLE_IMAGE_MODERATION')
IMAGE_MODERATION_CONFIDENCE_THRESHOLD = os.environ.get('IMAGE_MODERATION_CONFIDENCE_THRESHOLD')
    
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
]

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# For Cloud Run with mounted bucket
if os.environ.get('K_SERVICE'):  # This env var is present in Cloud Run
    # Path where the bucket is mounted
    GS_MEDIA_BUCKET_PATH = '/app/media'
    # Set media root to the mount point
    MEDIA_ROOT = GS_MEDIA_BUCKET_PATH
    # Use FileSystemStorage for mounted bucket
    DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'
    
    # Add this line to ensure proper URL handling for media files
    MEDIA_URL = '/media/'

# Payment Details
PAYPAL_CLIENT_ID = os.environ.get('PAYPAL_CLIENT_ID', 'YOUR_SANDBOX_CLIENT_ID')
PAYPAL_SECRET = os.environ.get('PAYPAL_SECRET', 'YOUR_SANDBOX_SECRET')

# Allow PayPal popups to work properly
SECURE_CROSS_ORIGIN_OPENER_POLICY = 'same-origin-allow-popups'

# Comprehensive CSP that allows PayPal integration
CSP_DEFAULT_SRC = ("'self'",)
CSP_SCRIPT_SRC = (
    "'self'", 
    "'unsafe-inline'", 
    "'unsafe-eval'",
    "https://*.paypal.com", 
    "https://*.paypalobjects.com",
    "https://*.google.com"
)
CSP_STYLE_SRC = (
    "'self'", 
    "'unsafe-inline'",
    "https://cdnjs.cloudflare.com",
    "https://*.paypal.com", 
    "https://*.paypalobjects.com",
    "https://unpkg.com",
    "https://maxcdn.bootstrapcdn.com"
)
CSP_CONNECT_SRC = (
    "'self'",
    "https://*.paypal.com",
    "https://*.paypal.cn",
    "https://*.paypalobjects.com",
    "https://objects.paypal.cn",
    "https://192.55.233.1",
    "https://*.google.com",
    "https://www.google.com",
    "https://browser-intake-us5-datadoghq.com",
    "https://*.qualtrics.com"
)
CSP_FRAME_SRC = (
    "'self'",
    "https://*.paypal.com",
    "https://*.google.com"
)
CSP_IMG_SRC = (
    "'self'",
    "data:",
    "https://*.paypal.com",
    "https://*.paypalobjects.com",
    "https://*.google.com"
)
CSP_FONT_SRC = (
    "'self'",
    "data:",
    "https://cdnjs.cloudflare.com",
    "https://*.paypal.com",
    "https://*.paypalobjects.com",
    "https://fonts.gstatic.com",
    "https://unpkg.com",
    "https://maxcdn.bootstrapcdn.com"
)